{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/routes.ts"],"sourcesContent":["/**\n * An array of routes taht are accessible to the public.\n * These routes do not require auth credentials\n * @returns {string[]}\n */\nexport const publicRoutes = [\"/\"];\n\n/**\n * Routes that are used for authentication\n * These routes do not require auth credentials\n * @returns {string[]}\n */\nexport const authRoutes = [\"/login\"];\n\n/**\n * The prefix for API authentication routes\n * Routes that start with this prefix are used for API authentication purposes\n * @returns {string}\n */\nexport const apiAuthPrefix = \"/api/auth\";\n\n/**\n * The default login page in this app, not the server\n */\nexport const LOGIN_URL = \"/login\";\n\n/**\n * Home url\n * @returns {string}\n */\nexport const HOME_URL = \"/dashboard\";\n\n/**\n * The default redirect path after successfull log in.\n * @returns {string}\n */\nexport const DEFAULT_LOGIN_REDIRECT = HOME_URL;\n\n/**\n * Experimental\n * A universal object to access all paths in the application ,\n * it must serve as a source of truth for all path navigation\n */\nexport const map = {\n  login: LOGIN_URL,\n  dashboard: \"/dashboard\",\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;;;;AACM,MAAM,eAAe;IAAC;CAAI;AAO1B,MAAM,aAAa;IAAC;CAAS;AAO7B,MAAM,gBAAgB;AAKtB,MAAM,YAAY;AAMlB,MAAM,WAAW;AAMjB,MAAM,yBAAyB;AAO/B,MAAM,MAAM;IACjB,OAAO;IACP,WAAW;AACb"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { auth } from \"@features/auth/auth\";\nimport * as routes from \"./lib/routes\";\nimport { i18nRouter } from \"next-i18n-router\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport i18n from \"@/i18n\";\n\n\n// @ts-expect-error\nexport default auth((req) => {\n  const { nextUrl } = req;\n  const isLoggedIn = !!req.auth;\n  const currentRoute = nextUrl.pathname;\n  const isApiAuthRoute = currentRoute.includes(routes.apiAuthPrefix);\n  const isPublicRoute = routes.publicRoutes.includes(currentRoute);\n  const isAuthRoute = routes.authRoutes.includes(currentRoute);\n\n  if (isApiAuthRoute) {\n    return null;\n  }\n\n  if (isAuthRoute) {\n    if (isLoggedIn) {\n      return Response.redirect(\n        new URL(routes.DEFAULT_LOGIN_REDIRECT, nextUrl)\n      );\n    }\n    return null;\n  }\n\n  if (!isLoggedIn && !isPublicRoute) {\n    return Response.redirect(new URL(routes.LOGIN_URL, nextUrl));\n  }\n\n  return null;\n});\n\n/**\n * Clerk: https://clerk.com/docs/references/nextjs/clerk-middleware\n */\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    \"/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)\",\n    // Always run for API routes\n    \"/(api|trpc)(.*)\",\n  ],\n};\n"],"names":[],"mappings":";;;;;;;;;AACA;;;uCAOe,KAAK,CAAC;IACnB,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,aAAa,CAAC,CAAC,IAAI,IAAI;IAC7B,MAAM,eAAe,QAAQ,QAAQ;IACrC,MAAM,iBAAiB,aAAa,QAAQ,CAAC,qHAAO,aAAa;IACjE,MAAM,gBAAgB,qHAAO,YAAY,CAAC,QAAQ,CAAC;IACnD,MAAM,cAAc,qHAAO,UAAU,CAAC,QAAQ,CAAC;IAE/C,IAAI,gBAAgB;QAClB,OAAO;IACT;IAEA,IAAI,aAAa;QACf,IAAI,YAAY;YACd,OAAO,SAAS,QAAQ,CACtB,IAAI,IAAI,qHAAO,sBAAsB,EAAE;QAE3C;QACA,OAAO;IACT;IAEA,IAAI,CAAC,cAAc,CAAC,eAAe;QACjC,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,qHAAO,SAAS,EAAE;IACrD;IAEA,OAAO;AACT;AAKO,MAAM,SAAS;IACpB,SAAS;QACP,6EAA6E;QAC7E;QACA,4BAA4B;QAC5B;KACD;AACH"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}